# Zone Fade Detector - Cursor Rules

## 🎯 Project Overview
This is a sophisticated trading system for detecting Zone Fade setups using higher-timeframe zones, rejection candles, and volume analysis.

## 🚫 Critical Rules

### Git Operations
- **NEVER run `git push origin main`** - This is strictly forbidden
- Always use `git push origin <branch-name>` for feature branches
- Use pull requests for all changes to main branch
- Commit frequently with descriptive messages

### Docker Operations
- Always use `timeout` command for shell operations to prevent hanging
- Use `docker-compose` instead of `docker compose` for compatibility
- Always specify `--entrypoint=""` when running custom commands in containers
- Use `-v $(pwd):/app` for volume mounting

### Code Quality
- Follow PEP 8 Python style guidelines
- Use type hints for all function parameters and return values
- Write comprehensive docstrings for all public methods
- Keep functions focused and single-purpose
- Use descriptive variable and function names

### Testing
- Write unit tests for all new functionality
- Add integration tests for complex workflows
- Ensure all tests pass before committing
- Use descriptive test names that explain what is being tested

### Documentation
- Update README.md for user-facing changes
- Add docstrings for new functions/classes
- Update CHANGELOG.md for significant changes
- Include examples for new features

## 🏗️ Architecture Guidelines

### Component Design
- Keep components loosely coupled
- Use dependency injection where appropriate
- Follow the existing pattern for new indicators
- Maintain separation between data, logic, and presentation

### Error Handling
- Use specific exception types
- Provide meaningful error messages
- Include fallback mechanisms where appropriate
- Log errors with appropriate levels

### Performance
- Consider memory usage for rolling windows
- Optimize for 30-second polling intervals
- Use efficient data structures
- Profile performance-critical code

## 📊 Trading Strategy Rules

### Zone Fade Detection
- Always validate both wick rejection AND volume spike
- Use QRS scoring for setup quality assessment
- Implement proper CHoCH confirmation
- Maintain HTF zone relevance

### Data Management
- Use persistent storage for historical data
- Implement proper caching mechanisms
- Handle API rate limits gracefully
- Validate data quality before processing

### Alert System
- Use multiple alert channels (console, file, Discord)
- Include comprehensive setup information
- Format alerts for readability
- Handle alert failures gracefully

## 🔧 Development Workflow

### Before Starting Work
1. Check current todos and priorities
2. Understand the existing architecture
3. Review related code and documentation
4. Plan the implementation approach

### During Development
1. Make small, focused changes
2. Test frequently
3. Commit with descriptive messages
4. Update documentation as needed

### Before Committing
1. Run all tests
2. Check code style
3. Update documentation
4. Review changes
5. Write descriptive commit message

## 📋 Current Priorities

### High Priority
- Rolling window management system
- Session state management
- Micro window analysis
- Parallel cross-symbol processing
- ES/NQ/RTY futures integration

### Medium Priority
- Additional indicators
- Performance optimizations
- Enhanced alert formatting
- More comprehensive backtesting

### Low Priority
- UI improvements
- Additional documentation
- Code refactoring
- Test coverage improvements

## 🚨 Common Pitfalls to Avoid

### Git Issues
- Never push directly to main
- Don't commit large files or sensitive data
- Always use descriptive commit messages
- Don't force push to shared branches

### Docker Issues
- Don't run commands without timeout
- Always use proper volume mounting
- Don't forget to specify entrypoint for custom commands
- Don't run containers without proper environment setup

### Code Issues
- Don't skip error handling
- Don't ignore type hints
- Don't write functions that are too long
- Don't skip documentation

### Trading Issues
- Don't ignore volume analysis
- Don't skip QRS scoring
- Don't forget CHoCH confirmation
- Don't use stale data

## 📚 Resources

### Documentation
- README.md - Project overview and setup
- CONTRIBUTING.md - Contribution guidelines
- CHANGELOG.md - Version history
- STRATEGY_ANALYSIS.md - Strategy implementation analysis

### Code Structure
- src/zone_fade_detector/ - Main source code
- tests/ - Test suite
- config/ - Configuration files
- docs/ - Additional documentation

### Key Files
- docker-compose.yml - Container orchestration
- requirements.txt - Python dependencies
- pyproject.toml - Project configuration
- .env.example - Environment variables template

## 🎯 Success Metrics

### Code Quality
- >80% test coverage
- All tests passing
- No linting errors
- Comprehensive documentation

### Trading Performance
- Accurate zone detection
- Reliable rejection candle validation
- Effective QRS scoring
- Successful alert generation

### System Performance
- 30-second polling intervals
- Efficient memory usage
- Reliable data processing
- Stable alert delivery

Remember: The goal is to build a robust, reliable trading system that accurately identifies Zone Fade setups while maintaining high code quality and performance standards.